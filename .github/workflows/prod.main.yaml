name: Deploy to AWS EC2
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Build the application
      run: |
        ./mvnw clean package -DskipTests
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: spring-app
        path: target/*.jar
    
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_KEY: ${{ secrets.EC2_KEY }}
        APP_DIR: ${{ secrets.APP_DIR }}
      run: |
        # Create SSH key file
        echo "$EC2_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Test SSH connection
        if ! ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "echo 'SSH connection successful'"; then
          echo "Failed to establish SSH connection"
          exit 1
        fi
        
        # Create and upload the startup script
        cat << 'EOF' > start-application.sh
        #!/bin/bash

        echo "Stopping any existing application instance..."
        
        # Kill existing process if running
        if [ -f "${APP_DIR}/app.pid" ]; then
          OLD_PID=$(cat "${APP_DIR}/app.pid")
          if ps -p $OLD_PID > /dev/null; then
            echo "Killing process $OLD_PID"
            kill -15 $OLD_PID
            sleep 5
            # Force kill if still running
            if ps -p $OLD_PID > /dev/null; then
              echo "Force killing process $OLD_PID"
              kill -9 $OLD_PID
            fi
          fi
          rm "${APP_DIR}/app.pid"
        fi

        # Additional check for any java process running the app.jar
        EXISTING_PID=$(pgrep -f "java -jar ${APP_DIR}/app.jar")
        if [ ! -z "$EXISTING_PID" ]; then
          echo "Found additional process $EXISTING_PID, killing it..."
          kill -15 $EXISTING_PID
          sleep 5
          # Force kill if still running
          if ps -p $EXISTING_PID > /dev/null; then
            echo "Force killing process $EXISTING_PID"
            kill -9 $EXISTING_PID
          fi
        fi

        # Export environment variables
        export APPLICATION_NAME=${{ secrets.APPLICATION_NAME }}
        export DATABASE_URL=${{ secrets.DATABASE_URL }}
        export DB_NAME=${{ secrets.DB_NAME }}

        echo "Starting new application instance..."
        cd "${APP_DIR}"
        nohup java -jar app.jar > app.log 2>&1 &

        # Save the PID to a file
        echo $! > app.pid
        NEW_PID=$(cat app.pid)
        echo "Application started with PID: $NEW_PID"

        # Verify the process is running
        sleep 5
        if ps -p $NEW_PID > /dev/null; then
          echo "Application successfully started and running"
        else
          echo "Failed to start application"
          exit 1
        fi
        EOF
        
        # Ensure the target directory exists on EC2
        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "mkdir -p $APP_DIR"
        
        # Upload the JAR file
        echo "Uploading JAR file..."
        scp -o StrictHostKeyChecking=no -i private_key.pem target/*.jar $EC2_USER@$EC2_HOST:$APP_DIR/app.jar
        
        # Upload and execute the startup script
        echo "Uploading and executing startup script..."
        scp -o StrictHostKeyChecking=no -i private_key.pem start-application.sh $EC2_USER@$EC2_HOST:$APP_DIR/
        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "chmod +x $APP_DIR/start-application.sh && cd $APP_DIR && ./start-application.sh"
