name: Deploy to AWS EC2
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Build the application
      run: |
        ./mvnw clean package -DskipTests
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: spring-app
        path: target/*.jar
    
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_KEY: ${{ secrets.EC2_KEY }}
        APP_DIR: ${{ secrets.APP_DIR }}
      run: |
        # Create SSH key file
        echo "$EC2_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Test SSH connection
        if ! ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "echo 'SSH connection successful'"; then
          echo "Failed to establish SSH connection"
          exit 1
        fi
        
        # Create and upload the startup script
        cat << 'EOF' > start-application.sh
        #!/bin/bash

        # Export environment variables
        export APPLICATION_NAME="{{ secrets.APPLICATION_NAME }}"
        export DATABASE_URL="{{ secrets.DATABASE_URL }}"
        export DB_NAME="{{ secrets.DB_NAME }}"

        # Check if application is already running
        if pgrep -f "java -jar ${APP_DIR}/app.jar" > /dev/null; then
          echo "Application is already running"
          exit 0
        fi

        # Start the application with environment variables
        echo "Starting application..."
        cd "${APP_DIR}"
        nohup java -jar app.jar > app.log 2>&1 &

        # Save the PID to a file
        echo $! > app.pid
        echo "Application started with PID: $(cat app.pid)"
        EOF
        
        # Ensure the target directory exists on EC2
        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "mkdir -p $APP_DIR"
        
        # Upload the JAR file only if it doesn't exist
        echo "Uploading JAR file..."
        scp -o StrictHostKeyChecking=no -i private_key.pem target/*.jar $EC2_USER@$EC2_HOST:$APP_DIR/app.jar
        
        # Upload and execute the startup script
        echo "Uploading and executing startup script..."
        scp -o StrictHostKeyChecking=no -i private_key.pem start-application.sh $EC2_USER@$EC2_HOST:$APP_DIR/
        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "chmod +x $APP_DIR/start-application.sh && cd $APP_DIR && ./start-application.sh"
